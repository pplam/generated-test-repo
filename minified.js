"use strict";const fork=require("child_process").fork,path=require("path"),CLI=require("./_cli.js"),cli=CLI("usage: ./node scatter.js [options] [--] <filename>\n  Run the benchmark script <filename> many times and output the rate (ops/s)\n  together with the benchmark variables as a csv.\n  --runs 30              number of samples\n  --set  variable=value  set benchmark variable (can be repeated)\n",{arrayArgs:["set"]});1!==cli.items.length&&cli.abort(cli.usage);const filepath=path.resolve(cli.items[0]),name=filepath.slice(__dirname.length+1),runs=cli.optional.runs?parseInt(cli.optional.runs,10):30;let printHeader=!0;function csvEncodeValue(e){return"number"==typeof e?e.toString():`"${e.replace(/"/g,'""')}"`}!function e(t){const n=fork(path.resolve(__dirname,filepath),cli.optional.set);n.on("message",e=>{if("report"!==e.type)return;if(printHeader){const t=Object.keys(e.conf).map(csvEncodeValue).join(", ");console.log(`"filename", ${t}, "rate", "time"`),printHeader=!1}const t=Object.keys(e.conf).map(t=>csvEncodeValue(e.conf[t])).join(", ");console.log(`"${name}", ${t}, ${e.rate}, ${e.time}`)}),n.once("close",n=>{n?process.exit(n):t+1<runs&&e(t+1)})}(0);
